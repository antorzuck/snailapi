from response import Response

class SnailApi:

    def __init__(self):
        self.routes = dict()
        print(self.routes)


    def __call__(self, environ, start_response):

        handler = self.routes.get(path)
        if req_method in handler:
            response = Response()
            
            handler[req_method](response)
            return response.asgi(start_response)

        else:
            start_response("200 OK", [('Content-Type','Text/Plain')])
            return [b"method not allowed bro or the route dont exist!"]


    def add_to_route(self, path, method, handler):
        if path not in self.routes:
            self.routes[path] = {}
            
        self.routes[path][method] = handler
        return handler


    def get(self, path):
        def wrapper(handler):
            self.add_to_route(path=path, method="GET", handler=handler)
            
        return wrapper
        
    def post(self, path):
        def wrapper(handler):
            self.add_to_route(path=path, method="POST", handler=handler)
            
        return wrapper
        
    def put(self, path):
        def wrapper(handler):
            self.add_to_route(path=path, method="PUT", handler=handler)
            
        return wrapper
        
    def delete(self, path):
        def wrapper(handler):
            self.add_to_route(path=path, method="DELETE", handler=handler)
            
        return wrapper    


